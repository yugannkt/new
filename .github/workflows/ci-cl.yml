name: CI/CD Pipelinee
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: self-hosted  # Use self-hosted runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 975050161532.dkr.ecr.us-east-1.amazonaws.com


      - name: Build Docker images
        run: |
          # Build frontend image
          cd frontend
          docker build -t capstone_proj_frontend .

          # Build backend image
          cd ../backend
          docker build -t capstone_proj_backend .

      - name: Tag and push frontend image
        run: |
          docker tag capstone_proj_frontend:latest 975050161532.dkr.ecr.us-east-1.amazonaws.com/capstone_proj_frontend:latest
          docker push 975050161532.dkr.ecr.us-east-1.amazonaws.com/capstone_proj_frontend:latest

      - name: Tag and push backend image
        run: |
          docker tag capstone_proj_backend:latest 975050161532.dkr.ecr.us-east-1.amazonaws.com/capstone_proj_backend:latest
          docker push 975050161532.dkr.ecr.us-east-1.amazonaws.com/capstone_proj_backend:latest

      - name: Deploy to ECS
        run: |
          # Define your ECS cluster name and service name
          ECS_CLUSTER_NAME="capstone-cluster"
          FRONTEND_SERVICE_NAME="capstone_proj_frontend"
          BACKEND_SERVICE_NAME="capstone-backend-service"

          # Update frontend service
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $FRONTEND_SERVICE_NAME --force-new-deployment

          # Update backend service
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $BACKEND_SERVICE_NAME --force-new-deployment
